import { When } from '@badeball/cypress-cucumber-preprocessor';

import {
  getServiceProviderByDescription,
  navigateTo,
} from '../../common/helpers';
import { Environment, ServiceProvider } from '../../common/types';
import { getOperatorUserByType } from '../helpers';
import OperatorUser from '../helpers/operator-user';
import ExploitLoginPage from '../pages/exploit-login-page';
import ExploitNavigation from '../pages/exploit-navigation';
import ExploitSpFormPage from '../pages/exploit-sp-form-page';
import ExploitSpListPage from '../pages/exploit-sp-list-page';

const exploitNavigation = new ExploitNavigation();
const exploitSpListPage = new ExploitSpListPage();
const exploitSpFormPage = new ExploitSpFormPage();

class ExploitationWorkflow {
  allAppsUrl: string;
  exploitAppId: string;
  exploitRootUrl: string;
  user: OperatorUser;

  constructor({ allAppsUrl, exploitAppId, exploitRootUrl }: Environment) {
    this.allAppsUrl = allAppsUrl;
    this.exploitAppId = exploitAppId;
    this.exploitRootUrl = exploitRootUrl;
  }

  /**
   * Navigate to the exploitation website and setup the ExploitLoginPage
   * @returns l'instance de ExploitationWorkflow
   */
  init(): this {
    navigateTo({
      appId: this.exploitAppId,
      baseUrl: this.allAppsUrl,
    });
    return this;
  }

  /**
   * Log the user in on the exploitation website
   * @param user a user of the exploitation website
   * @returns the current ExploitationWorkflow instance
   */
  login(user: OperatorUser): this {
    this.user = user;
    const exploitLoginPage = new ExploitLoginPage(this.exploitRootUrl);
    exploitLoginPage.login(user);
    return this;
  }

  withUser(user: OperatorUser): this {
    this.user = user;
    return this;
  }

  logout(): void {
    exploitNavigation.logout();
  }

  toServiceProviderTab(): this {
    exploitNavigation.getServiceProviderLink().click();
    return this;
  }

  toIdentityProviderTab(): this {
    exploitNavigation.getIdentityProviderLink().click();
    return this;
  }

  setSpSsoDisabled(spName: string, isSsoDisabled: boolean): this {
    exploitSpListPage.navigateToUpdateSpPage(spName);
    exploitSpFormPage.fillValue('ssoDisabled', `${isSsoDisabled}`);
    exploitSpFormPage.validateForm(this.user);
    exploitSpListPage.checkConfirmSuccessMessage();
    return this;
  }
}

When(
  /^(j'active|je désactive) le SSO pour le fournisseur de service "([^"]+)"$/,
  function (action: string, spDescription: string) {
    expect(this.env).to.exist;
    const isSsoDisabled = action === 'je désactive' ? true : false;

    this.operatorUser = getOperatorUserByType('exploitant');
    const { name: spName }: ServiceProvider = getServiceProviderByDescription(
      this.serviceProviders,
      spDescription,
    );
    new ExploitationWorkflow(this.env)
      .init()
      .login(this.operatorUser)
      .toServiceProviderTab()
      .setSpSsoDisabled(spName, isSsoDisabled)
      .logout();
  },
);
