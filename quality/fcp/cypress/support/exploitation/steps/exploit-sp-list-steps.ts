import { Then, When } from '@badeball/cypress-cucumber-preprocessor';

import { getServiceProviderNameByDescription } from '../../common/helpers';
import { ServiceProviderConfig } from '../../common/types';
import { OperatorUser } from '../helpers';
import ExploitSpListPage from '../pages/exploit-sp-list-page';

const exploitSpListPage = new ExploitSpListPage();

When('je clique sur le bouton de création de FS', function () {
  exploitSpListPage.getCreateSpButton().click();
});

When(
  'je clique sur le bouton de modification du FS {string}',
  function (spNameOrDescription: string) {
    // Try to retrieve the SP from the fixtures otherwise use spNameOrDescription as spName
    const spName =
      getServiceProviderNameByDescription(
        this.serviceProviders,
        spNameOrDescription,
        false,
      ) ?? spNameOrDescription;

    exploitSpListPage.navigateToUpdateSpPage(spName);
    // Update SP config
    this.spConfig = this.spConfig ?? {};
    this.spConfig['name'] = spName;
  },
);

When(
  /^je supprime le fournisseur de service "([^"]*)"$/,
  function (spNameOrDescription: string) {
    // Try to retrieve the SP from the fixtures otherwise use spNameOrDescription as spName
    const spName =
      getServiceProviderNameByDescription(
        this.serviceProviders,
        spNameOrDescription,
        false,
      ) ?? spNameOrDescription;

    const user: OperatorUser = this.operatorUser;
    exploitSpListPage.deleteSp(spName, user);
  },
);

When(
  /^je supprime les fournisseurs de service commençant par "([^"]*)"$/,
  function (spNamePrefix: string) {
    const user: OperatorUser = this.operatorUser;
    exploitSpListPage.deleteAllSpStartingWith(spNamePrefix, user);
  },
);

Then('le message de confirmation de création de FS est affiché', function () {
  // Retrieve the SP name from the configuration used for the creation
  const { name: spName }: ServiceProviderConfig = this.spConfig;
  exploitSpListPage.checkConfirmCreateMessage(spName);
});

Then(
  'le message de confirmation de modification du FS {string} est affiché',
  function (spNameOrDescription: string) {
    // Try to retrieve the SP from the fixtures otherwise use spNameOrDescription as spName
    const spName =
      getServiceProviderNameByDescription(
        this.serviceProviders,
        spNameOrDescription,
        false,
      ) ?? spNameOrDescription;

    exploitSpListPage.checkConfirmUpdateMessage(spName);
  },
);

Then(
  'le message de confirmation de suppression du FS {string} est affiché',
  function (spNameOrDescription: string) {
    // Try to retrieve the SP from the fixtures otherwise use spNameOrDescription as spName
    const spName =
      getServiceProviderNameByDescription(
        this.serviceProviders,
        spNameOrDescription,
        false,
      ) ?? spNameOrDescription;

    exploitSpListPage.checkConfirmDeleteMessage(spName);
  },
);
