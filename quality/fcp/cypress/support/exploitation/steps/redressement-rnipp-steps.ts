import { Then, When } from '@badeball/cypress-cucumber-preprocessor';

import { getUserByCriteria, User } from '../../common/helpers';
import { OperatorUser } from '../helpers';
import RedressementRNIPPPage from '../pages/redressement-rnipp-page';

const redressementRNIPPPage = new RedressementRNIPPPage();

Then('le formulaire redressement RNIPP est affiché', function () {
  redressementRNIPPPage.checkIsVisible();
});

When(
  /^j'effectue un redressement RNIPP pour l'usager(?: avec l'erreur "([^"]+)")?$/,
  function (errorCode: string) {
    expect(this.user).to.exist;
    const currentUser: User = this.user;
    redressementRNIPPPage.fillInUserDetails(currentUser);
    // Enter the errorCode in the given name to force an RNIPP error response
    if (errorCode) {
      redressementRNIPPPage.getGivenNameInput().clear().type(errorCode);
    }
    redressementRNIPPPage.getSearchButton().click();
  },
);

When(
  /^j'effectue un redressement RNIPP pour l'usager "([^"]+)"$/,
  function (description: string) {
    const currentUser = getUserByCriteria(this.users, [description]);
    redressementRNIPPPage.fillInUserDetails(currentUser);
    redressementRNIPPPage.getSearchButton().click();
  },
);

Then("le message d'erreur RNIPP n'est pas affiché", function () {
  redressementRNIPPPage.checkIsRnippErrorDisplayed(false);
});

Then(
  "le message d'erreur RNIPP est affiché avec le code retour {string}",
  function (rnippStatus: string) {
    redressementRNIPPPage.checkIsRnippErrorDisplayed(true, rnippStatus);
  },
);

Then('le numéro de ticket support est affiché', function () {
  redressementRNIPPPage.checkSupportId();
});

Then("les informations RNIPP de l'usager sont affichées", function () {
  redressementRNIPPPage.checkRnippUserDetails(this.user.claims);
});

Then('le code retour RNIPP est {string}', function (rnippStatus: string) {
  redressementRNIPPPage.checkRnippStatus(rnippStatus);
});

Then("l'usager est inconnu de FranceConnect", function () {
  redressementRNIPPPage.checkIsUnknownUser();
});

Then("l'usager est déclaré {string}", function (text: string) {
  const isMale = text === 'décédé';
  redressementRNIPPPage.checkIsDeadUser(isMale);
});

Then(
  /^le statut de l'usager est "(actif|désactivé)"$/,
  function (state: string) {
    const enabled = state === 'actif';
    redressementRNIPPPage.checkIsEnabledUser(enabled);
  },
);

Then(
  /^la date de dernière connexion (est|n'est pas) affichée$/,
  function (text: string) {
    const isDisplayed = text === 'est';
    redressementRNIPPPage.checkIsLastConnectionDisplayed(isDisplayed);
  },
);

Then('la date de dernière connexion est correcte', function () {
  redressementRNIPPPage.checkIsLastConnectionDisplayed(true);
  redressementRNIPPPage.checkIsLastConnectionCorrect();
});

Then(
  /^le numéro du compte usager (est|n'est pas) affiché$/,
  function (text: string) {
    const isDisplayed = text === 'est';
    redressementRNIPPPage.checkIsAccountIdDisplayed(isDisplayed);
  },
);

When("je désactive le compte de l'usager", function () {
  const user: OperatorUser = this.operatorUser;

  redressementRNIPPPage.disableUser(user);
});

When("j'active le compte de l'usager", function () {
  const user: OperatorUser = this.operatorUser;

  redressementRNIPPPage.enableUser(user);
});
