import { When } from '@badeball/cypress-cucumber-preprocessor';

import {
  getIdentityProviderByNameOrDescription,
  getIdentityProviderNameByDescription,
  getServiceProviderNameByDescription,
  navigateTo,
} from '../../common/helpers';
import {
  Environment,
  IdentityProviderConfig,
  ServiceProviderConfig,
} from '../../common/types';
import {
  getIdentityProviderConfig,
  getOperatorUserByType,
  getServiceProviderConfig,
} from '../helpers';
import OperatorUser from '../helpers/operator-user';
import ExploitIdpFormPage from '../pages/exploit-idp-form-page';
import ExploitIdpListPage from '../pages/exploit-idp-list-page';
import ExploitLoginPage from '../pages/exploit-login-page';
import ExploitNavigation from '../pages/exploit-navigation';
import ExploitSpFormPage from '../pages/exploit-sp-form-page';
import ExploitSpListPage from '../pages/exploit-sp-list-page';

const exploitNavigation = new ExploitNavigation();
const exploitSpListPage = new ExploitSpListPage();
const exploitSpFormPage = new ExploitSpFormPage();
const exploitIdpListPage = new ExploitIdpListPage();
const exploitIdpFormPage = new ExploitIdpFormPage();

declare interface SpState {
  active?: boolean;
}

declare interface IdpState {
  display?: boolean;
  active?: boolean;
}

class ExploitationWorkflow {
  allAppsUrl: string;
  exploitAppId: string;
  exploitRootUrl: string;
  user: OperatorUser;
  spConfig: ServiceProviderConfig;
  idpConfig: IdentityProviderConfig;

  constructor({ allAppsUrl, exploitAppId, exploitRootUrl }: Environment) {
    this.allAppsUrl = allAppsUrl;
    this.exploitAppId = exploitAppId;
    this.exploitRootUrl = exploitRootUrl;
  }

  /**
   * Navigate to the exploitation website and setup the ExploitLoginPage
   * @returns l'instance de ConnectionWorkflow
   */
  init(): this {
    navigateTo({
      appId: this.exploitAppId,
      baseUrl: this.allAppsUrl,
    });
    return this;
  }

  /**
   * Log the user in on the exploitation website
   * @param user a user of the exploitation website
   * @returns the current ExploitationWorkflow instance
   */
  login(user: OperatorUser): this {
    this.user = user;
    const exploitLoginPage = new ExploitLoginPage(this.exploitRootUrl);
    exploitLoginPage.login(user);
    return this;
  }

  withUser(user: OperatorUser): this {
    this.user = user;
    return this;
  }

  logout(): void {
    exploitNavigation.logout();
  }

  // Service Provider commands

  toServiceProviderTab(): this {
    exploitNavigation.getServiceProviderLink().click();
    return this;
  }

  createSp(spConfig: ServiceProviderConfig, spName: string): this {
    this.spConfig = spConfig;
    this.spConfig.name = spName;
    exploitSpListPage.getCreateSpButton().click();
    exploitSpFormPage.fillDefaultValues(spConfig);
    exploitSpFormPage.validateForm(this.user);
    exploitSpListPage.checkConfirmCreateMessage(spName);
    // Keep track of the clientId of the new SP
    exploitSpListPage.getSpClientId(spName).then((clientId) => {
      this.spConfig.clientId = clientId;
      cy.wrap(this.spConfig).as('spConfig');
    });
    return this;
  }

  activateSp(spName: string): this {
    this.setSpState(spName, { active: true });
    return this;
  }

  setSpState(spName: string, state: SpState): this {
    exploitSpListPage.navigateToUpdateSpPage(spName);
    const { active } = state;
    if (active !== undefined) {
      exploitSpFormPage.fillValue('active', `${active}`);
    }
    exploitSpFormPage.validateForm(this.user);
    exploitSpListPage.checkConfirmSuccessMessage();
    return this;
  }

  deleteSp(spName: string): this {
    exploitSpListPage.deleteSp(spName, this.user);
    exploitSpListPage.checkConfirmDeleteMessage(spName);
    return this;
  }

  setSpIdpRestriction(
    spName: string,
    restrictionType: string,
    idpIds: string[],
  ): this {
    exploitSpListPage.navigateToUpdateSpPage(spName);
    exploitSpFormPage.fillValue('idpFilterExclude', restrictionType);
    exploitSpFormPage.fillIdpFilterListValues(idpIds);
    exploitSpFormPage.validateForm(this.user);
    exploitSpListPage.checkConfirmSuccessMessage();
    return this;
  }

  resetSpIdpRestriction(spName: string): this {
    exploitSpListPage.navigateToUpdateSpPage(spName);
    exploitSpFormPage.fillValue('idpFilterExclude', 'Aucune restriction');
    exploitSpFormPage.validateForm(this.user);
    exploitSpListPage.checkConfirmSuccessMessage();
    return this;
  }

  // Identity Provider commands

  toIdentityProviderTab(): this {
    exploitNavigation.getIdentityProviderLink().click();
    return this;
  }

  createIdp(idpConfig: IdentityProviderConfig, idpName: string): this {
    this.idpConfig = idpConfig;
    this.idpConfig.name = idpName;
    exploitIdpListPage.getCreateIdpButton().click();
    exploitIdpFormPage.fillDefaultValues(idpConfig);
    exploitIdpFormPage.validateForm(this.user);
    exploitIdpListPage.checkConfirmCreateMessage(idpName);
    // Keep track of the idpId of the new IdP
    exploitIdpListPage.getIdpUid(idpName).then((idpId) => {
      this.idpConfig.uid = idpId;
      cy.wrap(this.idpConfig).as('idpConfig');
    });
    return this;
  }

  activateIdp(idpName: string): this {
    this.setIdpState(idpName, { active: true, display: true });
    return this;
  }

  setIdpState(idpName: string, state: IdpState): this {
    exploitIdpListPage.navigateToUpdateIdpPage(idpName);
    const { active, display } = state;
    if (active !== undefined) {
      exploitIdpFormPage.fillValue('active', `${active}`);
    }
    if (display !== undefined) {
      exploitIdpFormPage.fillValue('display', `${display}`);
    }
    exploitIdpFormPage.validateForm(this.user);
    exploitIdpListPage.checkConfirmSuccessMessage();
    return this;
  }

  deleteIdp(idpName): this {
    exploitIdpListPage.deleteIdp(idpName, this.user);
    exploitIdpListPage.checkConfirmDeleteMessage(idpName);
    return this;
  }
}

When(
  "je crée le fournisseur de service {string} avec la configuration {string} sur le site d'exploitation",
  function (spName: string, spConfigName: string) {
    expect(this.env).to.exist;
    expect(this.spConfigs).to.exist;
    this.operatorUser = getOperatorUserByType('exploitant');
    const spConfig = getServiceProviderConfig(this.spConfigs, spConfigName);
    new ExploitationWorkflow(this.env)
      .init()
      .login(this.operatorUser)
      .toServiceProviderTab()
      .createSp(spConfig, spName)
      .activateSp(spName)
      .logout();
  },
);

When(
  /^je configure le fournisseur de service "([^"]+)" (actif|désactivé) sur le site d'exploitation$/,
  function (spNameOrDescription: string, activeText: string) {
    expect(this.env).to.exist;
    expect(this.serviceProviders).to.exist;
    // Try to retrieve the SP from the fixtures otherwise use spNameOrDescription as spName
    const spName =
      getServiceProviderNameByDescription(
        this.serviceProviders,
        spNameOrDescription,
        false,
      ) ?? spNameOrDescription;
    this.operatorUser = getOperatorUserByType('exploitant');
    const active = activeText === 'actif';
    new ExploitationWorkflow(this.env)
      .init()
      .login(this.operatorUser)
      .toServiceProviderTab()
      .setSpState(spName, { active })
      .logout();
  },
);

When(
  "je supprime le fournisseur de service {string} sur le site d'exploitation",
  function (spNameOrDescription: string) {
    expect(this.env).to.exist;
    expect(this.serviceProviders).to.exist;
    // Try to retrieve the SP from the fixtures otherwise use spNameOrDescription as spName
    const spName =
      getServiceProviderNameByDescription(
        this.serviceProviders,
        spNameOrDescription,
        false,
      ) ?? spNameOrDescription;
    this.operatorUser = getOperatorUserByType('exploitant');
    new ExploitationWorkflow(this.env)
      .init()
      .login(this.operatorUser)
      .toServiceProviderTab()
      .deleteSp(spName)
      .logout();
  },
);

When(
  /^j'ajoute "([^"]+)" à la "(Blacklist|Whitelist)" du fournisseur de service "([^"]+)" sur le site d'exploitation$/,
  function (
    idpNameOrDescription: string,
    restrictionType: string,
    spNameOrDescription: string,
  ) {
    expect(this.env).to.exist;
    expect(this.serviceProviders).to.exist;
    expect(this.identityProviders).to.exist;
    // Try to retrieve the SP from the fixtures otherwise use spNameOrDescription as spName
    const spName =
      getServiceProviderNameByDescription(
        this.serviceProviders,
        spNameOrDescription,
        false,
      ) ?? spNameOrDescription;
    // Try to retrieve the IDP from the fixtures name or description
    const { idpId } = getIdentityProviderByNameOrDescription(
      this.identityProviders,
      idpNameOrDescription,
    );
    this.operatorUser = getOperatorUserByType('exploitant');
    new ExploitationWorkflow(this.env)
      .init()
      .login(this.operatorUser)
      .toServiceProviderTab()
      .setSpIdpRestriction(spName, restrictionType, [idpId])
      .logout();
  },
);

When(
  /^je retire les restrictions de FI du fournisseur de service "([^"]+)" sur le site d'exploitation$/,
  function (spNameOrDescription: string) {
    expect(this.env).to.exist;
    expect(this.serviceProviders).to.exist;
    // Try to retrieve the SP from the fixtures otherwise use spNameOrDescription as spName
    const spName =
      getServiceProviderNameByDescription(
        this.serviceProviders,
        spNameOrDescription,
        false,
      ) ?? spNameOrDescription;
    this.operatorUser = getOperatorUserByType('exploitant');
    new ExploitationWorkflow(this.env)
      .init()
      .login(this.operatorUser)
      .toServiceProviderTab()
      .resetSpIdpRestriction(spName)
      .logout();
  },
);

When(
  "je crée le fournisseur d'identité {string} avec la configuration {string} sur le site d'exploitation",
  function (idpName: string, idpConfigName: string) {
    expect(this.env).to.exist;
    expect(this.idpConfigs).to.exist;
    this.operatorUser = getOperatorUserByType('exploitant');
    const idpConfig = getIdentityProviderConfig(this.idpConfigs, idpConfigName);
    new ExploitationWorkflow(this.env)
      .init()
      .login(this.operatorUser)
      .toIdentityProviderTab()
      .createIdp(idpConfig, idpName)
      .activateIdp(idpName)
      .logout();
  },
);

When(
  /^je configure le fournisseur d'identité "([^"]+)" (visible|invisible) et (actif|désactivé) sur le site d'exploitation$/,
  function (
    idpNameOrDescription: string,
    displayText: string,
    activeText: string,
  ) {
    expect(this.env).to.exist;
    expect(this.identityProviders).to.exist;
    // Try to retrieve the IDP from the fixtures otherwise use idpNameOrDescription as idpName
    const idpName =
      getIdentityProviderNameByDescription(
        this.identityProviders,
        idpNameOrDescription,
        false,
      ) ?? idpNameOrDescription;
    this.operatorUser = getOperatorUserByType('exploitant');
    const active = activeText === 'actif';
    const display = displayText === 'visible';
    new ExploitationWorkflow(this.env)
      .init()
      .login(this.operatorUser)
      .toIdentityProviderTab()
      .setIdpState(idpName, { active, display })
      .logout();
  },
);

When(
  "je supprime le fournisseur d'identité {string} sur le site d'exploitation",
  function (idpNameOrDescription: string) {
    expect(this.env).to.exist;
    expect(this.identityProviders).to.exist;
    // Try to retrieve the IDP from the fixtures otherwise use idpNameOrDescription as idpName
    const idpName =
      getIdentityProviderNameByDescription(
        this.identityProviders,
        idpNameOrDescription,
        false,
      ) ?? idpNameOrDescription;
    this.operatorUser = getOperatorUserByType('exploitant');
    new ExploitationWorkflow(this.env)
      .init()
      .login(this.operatorUser)
      .toIdentityProviderTab()
      .deleteIdp(idpName)
      .logout();
  },
);
