import { ServiceProvider, ServiceProviderConfig } from '../../common/types';

export const getServiceProviderConfig = (
  spConfigs: ServiceProviderConfig[],
  configName: string,
): ServiceProviderConfig => {
  const config = spConfigs[configName];
  expect(config, `no config value for ${configName}`).to.exist;
  return config;
};

export const getServiceProviderFromConfig = (
  spConfig: ServiceProviderConfig,
  platform: string,
): ServiceProvider => {
  const spSelectors = {
    fcButton: '#call-authorize-button',
    logoutButton: '.nav-logout',
  };
  const spLegacySelectors = {
    fcButton: "[data-role='login-authorize'] input",
    logoutButton: "[data-fc-logout-url='/logout']",
  };
  const selectors = platform === 'fcp-legacy' ? spLegacySelectors : spSelectors;
  const serviceProvider: ServiceProvider = {
    acrValue: `eidas${spConfig.eidas}`,
    authorizeHttpMethod: 'get',
    claims: [],
    // clientID retrieved after SP creation
    clientId: spConfig.clientId,
    descriptions: [spConfig.name],
    explicitConsent: spConfig.identityConsent === 'true',
    mocked: true,
    name: spConfig.name,
    redirectUri: spConfig.redirectUri,
    scopes: ['tous les scopes'],
    selectors,
    url: spConfig.site,
  };

  return serviceProvider;
};
