import { ChainableElement } from '../../common/types';

export default class IdpPreferencesComponent {
  getFutureIdpPreferenceLabelStatus(): ChainableElement {
    return cy.get(
      '#citizen-idp-preferences-0 [data-testid="future-idp-status-label"]',
    );
  }

  getFutureIdpPreferenceActionButton(): ChainableElement {
    return cy.get(
      '#citizen-idp-preferences-0 [data-testid="future-idp-action-button"]',
    );
  }

  checkFutureIdpPreferenceStatus(authorised: boolean): void {
    const badgeClass = authorised
      ? 'label-idp-preferences-success'
      : 'label-idp-preferences-danger';
    const badgeLabel = authorised ? 'Autorisés' : 'Bloqués';
    this.getFutureIdpPreferenceLabelStatus()
      .should('have.class', badgeClass)
      .should('have.text', badgeLabel);
  }

  getIdpPreference(idpName: string): ChainableElement {
    return cy.get(`#citizen-idp-preferences-0 [data-testid="${idpName}"]`);
  }

  getIdpStatusLabel(idpName: string): ChainableElement {
    return this.getIdpPreference(idpName).find(
      '[data-testid="idp-status-label"]',
    );
  }

  getIdpActionButton(idpName: string): ChainableElement {
    return this.getIdpPreference(idpName).find(
      '[data-testid="idp-action-button"]',
    );
  }

  checkAllIdpAuthorised(): void {
    const isAuthorised = true;
    cy.get('#citizen-idp-preferences-0 li').each(($li) => {
      const idpName = $li.attr('data-testid');
      this.checkIdpStatus(idpName, isAuthorised);
    });
  }

  checkIdpStatus(idpName: string, authorised: boolean): void {
    const badgeClass = authorised
      ? 'label-idp-preferences-success'
      : 'label-idp-preferences-danger';
    const badgeLabel = authorised ? 'Autorisé' : 'Bloqué';
    this.getIdpStatusLabel(idpName)
      .should('have.class', badgeClass)
      .should('have.text', badgeLabel);
  }
}
